

class KeyPadSolution {
	public static String solution(int[] numbers, String hand) {
		
		StringBuilder sb = new StringBuilder("");
		
		final int HEIGHT_MAX = 4;
		final int WIDTH_MAX = 3;
		final int RIGHT_HAND_INIT_HEIGHT = 3;
		final int RIGHT_HAND_INIT_WIDTH = 0;
		final int LEFT_HAND_INIT_HEIGHT = 3;
		final int LEFT_HAND_INIT_WIDHT = 2;
		final int NOW_POSITION = 1;
		
		//숫자배프 가상으로 2차원 배열 구성
		String[][] keyPadArray = {
				{"1","2","3"},
				{"4","5","6"},
				{"7","8","9"},
				{"*","0","#"}
		};
		
		//왼손 초기화 윙 치키
		int [][] leftHandArray = new int[HEIGHT_MAX][WIDTH_MAX];
		leftHandArray[RIGHT_HAND_INIT_HEIGHT][RIGHT_HAND_INIT_WIDTH] = NOW_POSITION;
		
		//오른손 초기화 윙 치키
		int[][] rightHandArray = new int[HEIGHT_MAX][WIDTH_MAX];;
		rightHandArray[LEFT_HAND_INIT_HEIGHT][LEFT_HAND_INIT_WIDHT] = NOW_POSITION;
		
		//탐색
		for(int i = 0; i < numbers.length;i++) {
			int targetHeight;
			int targetWidth;
			
			//number i 번째 숫자가 keypad 어디에 위치해있는지 확인
			for(int keyHeightIndex = 0; keyHeightIndex < keyPadArray.length;keyHeightIndex++) {
				for(int keyWidthIndex = 0; keyWidthIndex <keyPadArray[keyHeightIndex].length;keyWidthIndex++) {
					if(Integer.toString(numbers[i]).equals(keyPadArray[keyHeightIndex][keyWidthIndex])) {

						targetHeight = keyHeightIndex;
						targetWidth = keyWidthIndex;
						System.out.print(numbers[i] + " : " + targetHeight + "," + targetWidth);
					}
				}
			}
			System.out.println();
			//좌측 우선 숫자인지 확인
			
			
			//아니면 우측 우선 숫자인지 확인
			
			//가운데면 현재 위치와 비교해서 더 가까운 숫자가 이동
			
			
			
		}
		
		String answer = "";
		return null;
	}
}